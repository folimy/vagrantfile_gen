# -*- mode: ruby -*-
# vi: set ft=ruby :

# Script for Default env. of zinst
$script = <<SCRIPT
LANG=en_US.UTF-8
sed -i '/^LANG=/d' /etc/sysconfig/i18n
echo 'LANG=en_US.UTF-8' >> /etc/sysconfig/i18n
sed -i 's/=enforcing/=disabled/g' /etc/selinux/config
setenforce 0
curl -sL http://bit.ly/online-install |sh
/usr/bin/zinst self-conf ip=10.52.164.254 host=package.dist.gsenext.com
zinst self-update
zinst i server_default_setting gsshop_account_policy -stable
zinst i monit -stable
SCRIPT


#ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
VAGRANTFILE_API_VERSION = "2"
NODE_COUNT = 10
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

### Single Server setting by static configuration
  config.vm.provision "shell", inline: $script
  config.vm.define "mgmt01" do |mgmt01|
    mgmt01.vm.box = "centos6"
    config.vm.network "private_network", ip: "192.168.33.10"
#    config.vm.network :forwarded_port, guest: 8000, host: 80
#    config.vm.synced_folder "/Users/RalfYang/vagrant_field/source", "/source"
  end

## For Bakery instance setup for global
  config.vm.define "bakery_global" do |bakery_global|
    config.vm.provision "shell", path: "../../provisioning/bakery.sh", args: "global"
    config.vm.network "private_network", ip: "192.168.33.200"
    bakery_global.vm.box = "centos6"
  end

## For Bakery instance setup for mc service
  config.vm.define "bakery_mc" do |bakery_mc|
    config.vm.provision "shell", path: "../../provisioning/bakery.sh", args: "mc"
    config.vm.network "private_network", ip: "192.168.33.210"
    bakery_mc.vm.box = "centos6"
  end


### Multi Server setting by Dynamic configuration
#  config.vm.provider "virtualbox" do |v|
#    v.customize ["modifyvm", :id, "--memory", 256]
#    v.customize ["modifyvm", :id, "--cpus", 2]
#    v.customize ["modifyvm", :id, "--nic2", "intnet", "--intnet2", "#{INTNET_NAME}"]
#  end
 
## For centos test instance setup
  NODE_COUNT.times do |i|
    node_id = "web0#{i}"
    config.vm.define node_id do |node|
    config.vm.network "private_network", ip: "192.168.33.1#{i}"
      node.vm.box = "centos6"
      node.vm.hostname = "#{node_id}"
    end
  end


## For ubuntu test instance setup
  NODE_COUNT.times do |i|
    node_id = "was0#{i}"
    config.vm.define node_id do |node|
#    config.vm.network "private_network", ip: "192.168.33.11#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
      node.vm.network :private_network, :libvirt_network_name => "vagrant-libvirt", :ip => "192.168.121.12#{i+1}"
      node.vm.network :public_network, :dev => "br0", :mode => "bridge", :type => "bridge", :ip => "10.0.1.12#{i+1}", :netmask => "255.255.255.0", :auto_config => "false"
    end
  end


## For Mesos slave instance 
  NODE_COUNT.times do |i|
    node_id = "slave0#{i}.mesos"
    config.vm.define node_id do |node|
    								  ### Args= [service name] [master / slave] [master IP] [advertise IP]
    config.vm.provision "shell", path: "../../provisioning/mesos.sh", args: "mc slave 10.53.15.219 10.53.26.149"
    config.vm.network "private_network", ip: "192.168.133.10#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end


## For Mesos master instance 
  NODE_COUNT.times do |i|
    node_id = "master0#{i}.mesos"
    config.vm.define node_id do |node|
							          ### Args= [service name] [master / slave]
    config.vm.provision "shell", path: "../../provisioning/mesos.sh", args: "mc master"
    config.vm.network "private_network", ip: "192.168.133.1#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end


 
## For Consul server instance 
  NODE_COUNT.times do |i|
    node_id = "server0#{i}.consul"
    config.vm.define node_id do |node|
							           ### Args= [server / client] [Startup group IPs. parses by "," ]
    config.vm.provision "shell", path: "../../provisioning/consul.sh", args: "server 192.168.133.20,192.168.133.21,192.168.133.31"
    config.vm.network "private_network", ip: "192.168.133.2#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end

 
## For Consul client instance 
  NODE_COUNT.times do |i|
    node_id = "client0#{i}.consul"
    config.vm.define node_id do |node|
							           ### Args= [server / client] [Startup group IPs. parses by "," ]
    config.vm.provision "shell", path: "../../provisioning/consul.sh", args: "client 192.168.133.20,192.168.133.21,192.168.133.31"
    config.vm.network "private_network", ip: "192.168.133.3#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end

 
## For Haproxy master instance 
  NODE_COUNT.times do |i|
    node_id = "master0#{i}.haproxy"
    config.vm.define node_id do |node|
								    ### Args= [master / slave]
    config.vm.provision "shell", path: "../../provisioning/haproxy.sh", args: "master"
    config.vm.network "private_network", ip: "192.168.133.13#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end

 
## For Haproxy slave instance 
  NODE_COUNT.times do |i|
    node_id = "slave0#{i}.haproxy"
    config.vm.define node_id do |node|
								    ### Args= [master / slave]
    config.vm.provision "shell", path: "../../provisioning/haproxy.sh", args: "slave"
    config.vm.network "private_network", ip: "192.168.133.14#{i}"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "#{node_id}"
    end
  end

 
## For Consul bootstrap instance. Notice! It have to be stay in bottom position.
    node_id = "bootstrap.consul"
    config.vm.define node_id do |node|
 								   ### Args= [master / slave] [Startup group IPs. parses by "," ]
    config.vm.provision "shell", path: "../../provisioning/consul.sh", args: "bootstrap 192.168.133.20,192.168.133.21,192.168.133.31"
    config.vm.network "private_network", ip: "192.168.133.20"
      node.vm.box = "ubuntu1404"
      node.vm.hostname = "bootstrap.consul"
    end


    config.vm.provider "libvirt" do |libvirt|
      libvirt.driver = "kvm"
      libvirt.memory = 1024
      libvirt.cpus = 1
      libvirt.uri = "qemu+tcp://10.0.1.12/system"
      libvirt.host = "10.0.1.12"
    end

end
